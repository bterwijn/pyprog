# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    2: &manual
        type: float
        subgrades:
            points: integer
        calculation: (points / 6.0 * 9 + 1).round(1)
        hide_calculated: true
    3: &check
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    chapter_02: *check
    chapter_03: *check
    chapter_04: *check
    chapter_05: *check
    chapter_06: *check
    chapter_07: *check
    chapter_08: *check
    chapter_09: *check
    chapter_10: *check
    chapter_11: *check
    chapter_12: *check
    chapter_13: *check
    chapter_14: *check

    cafeine:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
    vakantie:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)

    calculator:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
    etenstijd:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
    orakel:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
    rechthoeken:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
    wachtwoord:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)

    camelcase:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
    rna:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
    leesbaarheid:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
    cola:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
    populatie:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/4)
    sjoelen:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
    temperatuur:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)

    scrabble:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
    schuifpuzzel:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
    kalender:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/11)

    indexer:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
    eca2csv:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)
    klimaat:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/3)

    algorithms: *check
    comprehensions: *check
    virus: *manual

    lisp:
        <<: *manual
        calculation: (points / 1.0 * 9 + 1).round(1)
    figuren:
        <<: *manual
        calculation: (points / 2.0 * 9 + 1).round(1)
    knapsack:
        <<: *manual
        calculation: (points / 3.0 * 9 + 1).round(1)

    toetsje_week_2:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)
    toetsje_week_3:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)
    toetsje_week_4:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)

    m1: *manual
    m2: *manual
    m3: *manual
    m4: *manual
    m5: *manual
    m6: *manual

    oefententamen:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)
    exam_1: *check

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer:
        practice: 6
        assignments: 12
        reviews: 28
        final_assignments: 14
        exam: 0

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

practice:
    show_progress: true
    convert_passes_to_grade: true
    fill_missing: 0
    submits:
        chapter_02: 1
        chapter_03: 1
        chapter_04: 1
        chapter_05: 1
        chapter_06: 1
        chapter_07: 1
        chapter_08: 1
        chapter_09: 1
        chapter_10: 1
        chapter_11: 1
        chapter_12: 1
        chapter_13: 1
        chapter_14: 1

assignments:
    show_progress: true
    convert_passes_to_grade: true
    fill_missing: 0
    submits:
        cafeine: 105
        vakantie: 105

        orakel: 42
        etenstijd: 42
        calculator: 42
        rechthoeken: 42
        wachtwoord: 42

        camelcase: 30
        rna: 30
        leesbaarheid: 30
        cola: 30
        populatie: 30
        sjoelen: 30
        temperatuur: 30

        scrabble: 70
        schuifpuzzel: 70
        kalender: 70

        indexer: 70
        eca2csv: 70
        klimaat: 70

        algorithms: 105
        comprehensions: 105

reviews:
    show_progress: true
    submits:
        m1: 1
        m2: 1
        m3: 1
        m4: 1
        m5: 1

final_assignments:
    show_progress: true
    submits:
        virus: 6
        lisp: 1
        figuren: 2
        knapsack: 3

# tests:
#     show_progress: true
#     submits:
#         toetsje_week_2: 1
#         toetsje_week_3: 1
#         toetsje_week_4: 1
#         oefententamen: 1

exam:
    show_progress: true
    attempt_required: true
    submits:
        exam_1: 1
