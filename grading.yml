# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    4: &autopoints
        type: float
        subgrades:
            points: integer
        automatic:
            points: correctness_score
        calculation: (points / 6.0 * 9 + 1).round(1)
        # auto_publish: true
        hide_subgrades: true
    2: &manual
        type: float
        subgrades:
            points: integer
        calculation: points
        # hide_subgrades: true
    3: &check
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    # module 1
    experimenteren: *check
    fdr: *automatic
    weken: *automatic
    cafeine: *automatic
    vakantie: *automatic

    # simulaties
    populatie: *automatic
    sjoelen: *automatic
    prisoners: *check
    birthdays: *check

    # module 2
    string_func: *automatic
    acid: *automatic
    orakel: *automatic
    etenstijd: *automatic
    calculator: *automatic

    # module 3
    string_module: *automatic
    string_methods: *automatic
    rechthoeken: *automatic
    wachtwoord: *automatic

    # module 4
    list_functions: *automatic
    scrabble: *automatic
    cola: *automatic
    temperatuur: *automatic

    # module 5
    rna: *automatic
    leesbaarheid: *automatic
    camelcase: *automatic

    # module 6
    schuifpuzzel: *automatic
    kalender: *automatic

    # module 7

    # module 8
    comprehensions: *automatic
    virus: *automatic

    # module 9
    dict_oefening: *automatic
    set_oefening: *automatic
    collection_functions: *automatic

    # module 10
    collection_functions2: *automatic
    indexer: *automatic

    # module 10
    algorithms: *check

    # module 11
    queue: *automatic
    cards: *automatic
    country: *automatic
    lines: *automatic

    # module 12
    hangman: *automatic
    hangman-less: *automatic

    # module 13
    knapsack: *check

    # module 14
    eca2csv: *automatic
    klimaat: *automatic

    pygame: *check
    project: *check

    oefententamen: *automatic
