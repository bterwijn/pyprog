# This is a separate section containing a few templates that we will use below.
# The & feature is built into YAML, it is not a special feature of the website.
# The section does not need to be called `templates` necessarily.

templates:
    1: &automatic
        type: pass
        subgrades:
            done: boolean
        automatic:
            done: -(correctness_score.floor)
        calculation: done
        auto_publish: true
        hide_calculated: true
    4: &autopoints
        type: float
        subgrades:
            points: integer
        automatic:
            points: correctness_score
        calculation: (points / 6.0 * 9 + 1).round(1)
        # auto_publish: true
        hide_subgrades: true
    2: &manual
        type: float
        subgrades:
            points: integer
        calculation: points
        hide_subgrades: true
    3: &check
        type: pass
        subgrades:
            done: boolean
        calculation: done
        hide_calculated: true

# GRADES - contains definitions of how grades are structured. The names of the
# grades match the names of submits that may be defined in `submit.yml`
# elsewhere, but you can also create grades without an accompanying submit.
#
# The following properties are supported:
#
# - `type` can be `integer`, `float` or `pass`, which influences presentation
# and input
#
# - `subgrades` defines any extra numbers to be added to a grade, with their
# types `integer`, `pass`, `boolean` or `float`
#
# - note: if any subgrades are defined, teaching assistants are only allowed to
# enter those, and can't override the grade itself
#
# - `calculation` is an expression that is evaluated in the context of the
# subgrades, which means you can use any subgrade by name in that expression, as
# well as any standard Ruby objects and syntax
#
# - `automatic` is an expression that is evaluated in the context of any
# automatic grading results (as defined in `submit.yml`) - allowing the use of
# the variable `correctness_score`. It can only be used to fill in subgrades,
# but you can then use the `calculation` to transfer the value of a subgrade
# into the grade.
#
# - `hide_calculated` hides the calculated grade, only showing the entered
# subgrades (to de-emphasize grades for students)
#
# - `hide_subgrades` hides the subgrades, for example if you want to do a simple
# calculation but only show the resulting grade to students
#
# You can leave this out if grading isn't used or if each submit simply requires
# entering a final grade, no subgrades and no calculations.

grades:
    # module 1
    experimenteren:
        <<: *check
    fdr:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/10)
        deadline: 3/11/23 17:00
    weken:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
        deadline: 3/11/23 17:00
    cafeine:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 3/11/23 17:00
    vakantie:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 3/11/23 17:00

    # module 2
    string_func:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
        deadline: 3/11/23 17:00
    acid:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
        deadline: 3/11/23 17:00
    orakel:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 3/11/23 17:00
    etenstijd:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
        deadline: 3/11/23 17:00
    calculator:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 3/11/23 17:00

    # module 3
    string_module:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 10/11/23 17:00
    string_methods:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 10/11/23 17:00
    rechthoeken:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 10/11/23 17:00
    wachtwoord:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
        deadline: 10/11/23 17:00

    # module 4
    list_functions:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
        deadline: 10/11/23 17:00
    scrabble:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
        deadline: 10/11/23 17:00
    cola:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 10/11/23 17:00
    temperatuur:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 10/11/23 17:00

    # module 5
    rna:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 17/11/23 17:00
    leesbaarheid:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 17/11/23 17:00
    camelcase:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 17/11/23 17:00

    # module 6
    schuifpuzzel:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/8)
        deadline: 17/11/23 17:00
    kalender:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/12)
        deadline: 17/11/23 17:00

    # module 7
    populatie:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
        deadline: 24/11/23 17:00
    sjoelen:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/6)
        deadline: 24/11/23 17:00

    # module 8
    comprehensions:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/9)
        deadline: 24/11/23 17:00
    virus:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/17)
        deadline: 24/11/23 17:00

    # module 9
    collection_functions:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/7)
        deadline: 1/12/23 17:00
    indexer:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
        deadline: 1/12/23 17:00

    # module 10
    algorithms:
        <<: *check
        deadline: 1/12/23 17:00

    # module 11
    queue:
        <<: *automatic
        automatic:
            done: -correctness_score.floor
        deadline: 8/12/23 17:00
    cards:
        <<: *automatic
        automatic:
            done: -correctness_score.floor
        deadline: 8/12/23 17:00
    country:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
        deadline: 8/12/23 17:00
    lines:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/5)
        deadline: 8/12/23 17:00

    # module 12
    hangman:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/10)
        deadline: 8/12/23 17:00
    hangman-less:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor)
        deadline: 8/12/23 17:00

    # module 13
    knapsack:
        <<: *check
        deadline: 15/12/23 17:00

    # module 14
    eca2csv:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)
        deadline: 8/12/23 17:00
    klimaat:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/3)
        deadline: 8/12/23 17:00

    pygame:
        <<: *check
        deadline: 20/10/23 17:00
    project:
        <<: *check
        deadline: 20/10/23 17:00

    bg1:
        <<: *manual
        calculation: points / 6.0 * 9 + 1
        deadline: 25/9/23 20:00
    bg2:
        <<: *manual
        calculation: points / 6.0 * 9 + 1
        deadline: 10/10/23 20:00
    bg3:
        <<: *manual
        calculation: points / 6.0 * 9 + 1
        deadline: 9/10/23 20:00

    r1: *manual
    r2: *manual
    r3: *manual

    toetsje:
        is_test: true
        subgrades:
            gedaan: boolean
        calculation: gedaan
        hide_calculated: true

    toetsje_2:
        is_test: true
        subgrades:
            gedaan: boolean
        calculation: gedaan
        hide_calculated: true

    oefententamen:
        <<: *automatic
        automatic:
            done: -(correctness_score.floor/2)

    tentamen_bg:
        type: float
    tentamen_inf4all:
        type: float
    tentamen_ik:
        type: float
    tentamen_ki:
        type: float

# CALCULATIONS - define the final grades for the course and the weights between
# subcomponents for each. Often, multiple final grades are differentiated by the
# choice of grades that are used for the calculation, for example calculating
# the "normal" final grade based on the "first exam", and the "resit" final
# grade based on the result of the second exam. Currently, running "calculate
# final grades" on the website will try to calculate all, which might result in
# useless non-grades getting calculated.
#
# Weights specify proportionally to each other and do not need to add up to
# anything in particular. If a weight of 0 is specified, the grade is not used
# in the calculation, but the grade must be "passed" for the calculation to
# succeed.
#
# You can leave this out if the site does not need to perform final grade
# calculations.

calculation:
    eindcijfer_bg:
        code_reviews_bg: 25
        tentamen_bg: 75
    eindcijfer_inf4all:
        code_reviews: 25
        tentamen_inf4all: 75
    eindcijfer_ki:
        code_reviews: 25
        tentamen_ki: 75
    eindcijfer_ik:
        code_reviews: 25
        tentamen_ik: 75

# SUB-CALCULATIONS - define the components of the course that may be used in
# final grade calculations. A few constraints can be specified.
#
# The following properties are supported:
#
# `submits` are the names of the grades/submits with accompanying weight for
# each
#
# `show_progress: true` will list the results of the grades in a table on
# students' progress pages
#
# `required: true` will only "pass" this part if all comprising grades are
# passed (used with pass/fail tests)
#
# `minimum: 5.5` will only "pass" this part if the weighed average of the grades
# is at least the specified minimum
#
# You can leave these out if unused in the `calculation` section.

module_1:
    show_progress: true
    submits:
        experimenteren: 1
        fdr: 1
        weken: 1
        cafeine: 1
        vakantie: 1

module_2:
    show_progress: true
    submits:
        string_func: 1
        acid: 1
        orakel: 1
        etenstijd: 1
        calculator: 1

module_3:
    show_progress: true
    submits:
        string_module: 1
        string_methods: 1
        rechthoeken: 1
        wachtwoord: 1

module_4:
    show_progress: true
    submits:
        list_functions: 1
        scrabble: 1
        cola: 1
        temperatuur: 1

module_5:
    show_progress: true
    submits:
        rna: 1
        leesbaarheid: 1
        camelcase: 1

module_6:
    show_progress: true
    submits:
        schuifpuzzel: 1
        kalender: 1

module_7:
    show_progress: true
    submits:
        populatie: 1
        sjoelen: 1

module_8:
    show_progress: true
    submits:
        comprehensions: 1
        virus: 1

module_9:
    show_progress: true
    submits:
        collection_functions: 1
        indexer: 1

module_10:
    show_progress: true
    submits:
        queue: 1
        cards: 1

# mod_programmeren:
#     show_overview: true
#     submits:
#         experimenteren: 1
#         fdr: 1
#         weken: 1
#         cafeine: 1
#         vakantie: 1
#         orakel: 1
#         etenstijd: 1
#         calculator: 1
#
# mod_herhaling:
#     show_overview: true
#     submits:
#         rechthoeken: 1
#         wachtwoord: 1
#         scrabble: 1
#         cola: 1
#         temperatuur: 1
#
# mod_decompositie:
#     show_overview: true
#     submits:
#         rna: 1
#         leesbaarheid: 1
#         camelcase: 1
#         kalender: 1
#
# mod_simuleren:
#     show_overview: true
#     submits:
#         comprehensions: 1
#         populatie: 1
#         sjoelen: 1
#         virus: 1
#
# mod_algoritmen:
#     show_overview: true
#     submits:
#         algorithms: 1
#         indexer: 1
#         schuifpuzzel: 1
#
# mod_classes:
#     show_overview: true
#     submits:
#         queue: 1
#         cards: 1
#         hangman-less: 1
#         knapsack: 1
#
# mod_dataverwerking:
#     show_overview: true
#     submits:
#         eca2csv: 1
#         klimaat: 1
#
# mod_grote_programmas:
#     show_overview: true
#     submits:
#         pygame: 1
#
# mod_project:
#     show_overview: true
#     submits:
#         project: 1
#
# mod_project:
#     show_progress: true
#     submits:
#

code_reviews_bg:
    show_overview: true
    type: maximum
    submits:
        bg1: 1
        bg2: 1
        bg3: 1

code_reviews:
    show_progress: true
    type: points
    submits:
        r1: 1
        r2: 1
        r3: 1

tentamen_bg:
    show_overview: true
    minimum: 5.5
    attempt_required: true
    submits:
        tentamen_bg: 1

tentamen_inf4all:
    show_overview: true
    attempt_required: true
    submits:
        tentamen_inf4all: 1

tentamen_ki:
    show_overview: true
    attempt_required: true
    submits:
        tentamen_ki: 1

tentamen_ik:
    show_overview: true
    attempt_required: true
    submits:
        tentamen_ik: 1

oefeningen:
    show_progress: true
    submits:
        toetsje: 1
        toetsje_2: 1
